name: Build and Deploy to GKE
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  PROJECT_ID: '${{ secrets.GKE_PROJECT }}'
  IMAGE: helloworld-gke
  DEPLOYMENT_NAME: helloworld-gke
  DEPLOY_ENV: dev
jobs:
  build-publish-image:
    name: Build and publish image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: '${{ secrets.SA_KEY_JSON }}'
          project_id: '${{ secrets.GKE_PROJECT }}'
          export_default_credentials: true

      - run: gcloud --quiet auth configure-docker

      - name: Build
        run: 'docker build --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" .'

      - name: Publish
        run: 'docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"'

  deploy-private-gke:
    name: Deploy to private cluster
    runs-on: self-hosted
    needs:
      - build-publish-image
    steps:
      - name: override env
        if: github.event_name != 'pull_request'
        run: |
          echo "DEPLOY_ENV=prod" >> $GITHUB_ENV

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          environment: '${{ env.DEPLOY_ENV }}'
          ref: ${{ github.head_ref }}

      - name: Update deployment status (in prog)
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          state: in_progress
          deployment_id: '${{ steps.deployment.outputs.deployment_id }}'

      - name: Checkout
        uses: actions/checkout@v2

      - id: get-credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: prod-cluster
          location: us-central1
          credentials: '${{ secrets.SA_KEY_JSON }}'
          use_internal_ip: true

      - name: Set up Kustomize
        run: |
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Deploy
        run: |
          kubectl apply -f manifests/ns.yaml

          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

          ./kustomize edit set namespace $DEPLOY_ENV

          ./kustomize build . | kubectl apply -f -

          kubectl rollout status -n $DEPLOY_ENV deployment/$DEPLOYMENT_NAME

          kubectl get services -n $DEPLOY_ENV -o wide

          DEPLOY_IP=$(kubectl get services -n $DEPLOY_ENV hello --output jsonpath='{.status.loadBalancer.ingress[0].ip}')

          echo "DEPLOY_IP=$DEPLOY_IP" >> $GITHUB_ENV

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          deployment_id: '${{ steps.deployment.outputs.deployment_id }}'
          state: success
          environment_url: 'http://${{ env.DEPLOY_IP }}'

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'
          deployment_id: '${{ steps.deployment.outputs.deployment_id }}'
          state: failure
